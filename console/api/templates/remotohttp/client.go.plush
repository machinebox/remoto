// Code generated by Remoto; DO NOT EDIT.
<%

let serverName = fn(serviceName) {
	return serviceName + "Server"
}

%>
package <%= def.PackageName %>

import (
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"strconv"

	"github.com/matryer/remoto/remototypes"
	"github.com/oxtoacart/bpool"
	"github.com/pkg/errors"
)

<%= for (service) in def.Services { %>
// <%= service.Name %>Client accesses remote <%= service.Name %> services.
type <%= service.Name %>Client struct {
	// endpoint is the HTTP endpoint of the remote server.
	endpoint string
	// httpclient is the http.Client to use to make requests.
	httpclient *http.Client
	// bufs is a buffer pool
	bufs *bpool.BufferPool
}

// New<%= service.Name %>Client makes a new <%= service.Name %>Client that will
// use the specified http.Client to make requests.
func New<%= service.Name %>Client(endpoint string, client *http.Client) *<%= service.Name %>Client {
	return &<%= service.Name %>Client{
		endpoint: endpoint,
		httpclient: client,
		bufs: bpool.NewBufferPool(48),
	}
}

<%= for (method) in service.Methods { %>
<%= if (method.ResponseStructure.Name == "remototypes.FileResponse") { %>
<%= print_comment(method.Comment) %>func (c *<%= service.Name %>Client) <%= method.Name %>(ctx context.Context, request *<%= method.RequestStructure.Name %>) (io.ReadCloser, error) {
	b, err := json.Marshal([]interface{}{ request })
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: encode request")
	}
	buf := c.bufs.Get()
	defer c.bufs.Put(buf)
	w := multipart.NewWriter(buf)
	w.WriteField("json", string(b))
	if files, ok := ctx.Value(contextKeyFiles).(map[string]file); ok {
		for fieldname, file := range files {
			f, err := w.CreateFormFile(fieldname, file.filename)
			if err != nil {
				return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: create form file")
			}
			if _, err := io.Copy(f, file.r); err != nil {
				return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: reading file")
			}
			select {
			case <-ctx.Done():
				return nil, ctx.Err()
			default:
			}
		}
	}
	if err := w.Close(); err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: write")
	}
	req, err := http.NewRequest(http.MethodPost, c.endpoint + "/remoto/<%= service.Name %>.<%= method.Name %>", buf)
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: new request")
	}
	req.Header.Set("Accept", "application/json; charset=utf-8")
	req.Header.Set("Content-Type", w.FormDataContentType())
	req = req.WithContext(ctx)
	resp, err := c.httpclient.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: do")
	}
	if resp.StatusCode != http.StatusOK {
		resp.Body.Close()
		return nil, errors.Errorf("<%= service.Name %>Client.<%= method.Name %>: remote service returned %s", resp.Status)
	}
	return resp.Body, nil
}
<% } else { %>
<%= print_comment(method.Comment) %>func (c *<%= service.Name %>Client) <%= method.Name %>(ctx context.Context, request *<%= method.RequestStructure.Name %>) (*<%= method.ResponseStructure.Name %>, error) {
	resp, err := c.<%= method.Name %>Multi(ctx, []*<%= method.RequestStructure.Name %>{request})
	if err != nil {
		return nil, err
	}
	if len(resp) == 0 {
		return nil, errors.New("<%= service.Name %>Client.<%= method.Name %>: no response")
	}
	return resp[0], nil
}

func (c *<%= service.Name %>Client) <%= method.Name %>Multi(ctx context.Context, requests []*<%= method.RequestStructure.Name %>) ([]*<%= method.ResponseStructure.Name %>, error) {
	b, err := json.Marshal(requests)
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: encode request")
	}
	buf := c.bufs.Get()
	defer c.bufs.Put(buf)
	w := multipart.NewWriter(buf)
	w.WriteField("json", string(b))
	if files, ok := ctx.Value(contextKeyFiles).(map[string]file); ok {
		for fieldname, file := range files {
			f, err := w.CreateFormFile(fieldname, file.filename)
			if err != nil {
				return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: create form file")
			}
			if _, err := io.Copy(f, file.r); err != nil {
				return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: reading file")
			}
			select {
			case <-ctx.Done():
				return nil, ctx.Err()
			default:
			}
		}
	}
	if err := w.Close(); err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: write")
	}
	req, err := http.NewRequest(http.MethodPost, c.endpoint + "/remoto/<%= service.Name %>.<%= method.Name %>", buf)
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: new request")
	}
	req.Header.Set("Accept", "application/json; charset=utf-8")
	req.Header.Set("Content-Type", w.FormDataContentType())
	req = req.WithContext(ctx)
	resp, err := c.httpclient.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: do")
	}
	if resp.StatusCode != http.StatusOK {
		resp.Body.Close()
		return nil, errors.Errorf("<%= service.Name %>Client.<%= method.Name %>: remote service returned %s", resp.Status)
	}
	b, err = ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: read response body")
	}
	var resps []*<%= method.ResponseStructure.Name %>
	if err := json.Unmarshal(b, &resps); err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>Client.<%= method.Name %>: decode response body")
	}
	return resps, nil
}
<% } %>
<% } %>
<% } %>

<%= for (structure) in unique_structures(def) { %>
<%= print_comment(structure.Comment) %>type <%= structure.Name %> struct {
	<%= for (field) in structure.Fields { %>
	<%= print_comment(field.Comment) %><%= field.Name %> <%= go_type_string(field.Type) %> `json:"<%= underscore(field.Name) %>"`<% } %>
}

<%= for (field) in structure.Fields { %>
<%= if (field.Type.Name == "remototypes.File" && !structure.IsResponseObject) { %>
// Set<%= field.Name %> sets the file for the <%= field.Name %> field.
func (s *<%= structure.Name %>) Set<%= field.Name %>(ctx context.Context, filename string, r io.Reader) context.Context {
	files, ok := ctx.Value(contextKeyFiles).(map[string]file)
	if !ok {
		files = make(map[string]file)
	}
	fieldname := "files["+ strconv.Itoa(len(files)) + "]"
	files[fieldname] = file{r: r, filename: filename}
	ctx = context.WithValue(ctx, contextKeyFiles, files)
	s.<%= field.Name %> = remototypes.File{
		Fieldname: fieldname,
		Filename: filename,
	}
	return ctx
}
<% } %>
<%= if (field.Type.Name == "remototypes.File" && !structure.IsRequestObject) { %>
// Open<%= field.Name %> opens the file from the response.
func (s *<%= structure.Name %>) Open<%= field.Name %>(ctx context.Context) (io.Reader, error) {
	return nil, nil
}
<% } %>
<% } %>

<% } %>

// contextKey is a local context key type.
// see https://medium.com/@matryer/context-keys-in-go-5312346a868d
type contextKey string

func (c contextKey) String() string {
	return "remoto context key: " + string(c)
}

// contextKeyFiles is the context key for the request files.
var contextKeyFiles = contextKey("files")

// file holds info about a file in the context, including
// the io.Reader where the contents will be read from.
type file struct {
	r io.Reader
	filename string
}

// this is here so we don't get a compiler complaints.
func init() {
	var _ = remototypes.File{}
	var _ = strconv.Itoa(0)
	var _ = ioutil.Discard
}
