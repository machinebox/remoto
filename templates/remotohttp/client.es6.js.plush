// Code generated by Remoto; DO NOT EDIT.

// Remoto JavaScript Client
//
// uses the Fetch API: to support older browsers, use the polyfil https://github.github.io/fetch/

"use strict";

// _filesCount keeps track of the number of files being added, and is used
// to generate unique field names.
var _filesCount = 0

<%= for (service) in def.Services { %>
// <%= service.Name %>ClientOptions are the options for the <%= service.Name %>Client.
export class <%= service.Name %>ClientOptions {
	constructor(data = {}) {
		this._data = data
		this._data.endpoint = this._data.endpoint || "http://localhost:8080"
	}
	get endpoint() { return this._data.endpoint }
	set endpoint(endpoint) { this._data.endpoint = endpoint }
}

<%= print_comment(service.Comment) %>export class <%= service.Name %>Client {
	constructor(options) {
		this.options = options || new <%= service.Name %>ClientOptions()
	}
	<%= for (method) in service.Methods { %>
	<%= print_comment(method.Comment) %><%= camelize_down(method.Name) %>(<%= camelize_down(method.RequestStructure.Name) %> = null) {
		if (<%= camelize_down(method.RequestStructure.Name) %> == null) {
			<%= camelize_down(method.RequestStructure.Name) %> = new <%= method.RequestStructure.Name %>() // empty request by default is ok
		}
		return this.<%= camelize_down(method.Name) %>Multi([<%= camelize_down(method.RequestStructure.Name) %>]).then(function(responses) {
			return responses[0]
		})
	}

	// <%= method.Name %>Multi is the batch version of <%= method.Name %>.
	<%= camelize_down(method.Name) %>Multi(<%= camelize_down(method.RequestStructure.Name) %>s) {
		if (<%= camelize_down(method.RequestStructure.Name) %>s == null) {
			throw new Error('<%= service.Name %>Client.<%= camelize_down(method.Name) %>Multi: <%= camelize_down(method.RequestStructure.Name) %>s cannot be empty')
		}
		var data = new FormData()
		<%= camelize_down(method.RequestStructure.Name) %>s.forEach(function(request){
			if (request && !request instanceof <%= method.RequestStructure.Name %>) {
				throw '<%= service.Name %>Client.<%= camelize_down(method.Name) %>Multi: requests must be instances of <%= method.RequestStructure.Name %>'
			}
			Object.keys(request.allFiles).forEach(function(fieldname) {
				data.set(fieldname, request.allFiles[fieldname])
			})
		})
		data.set('json', JSON.stringify(<%= camelize_down(method.RequestStructure.Name) %>s))
		return fetch(this.options.endpoint + '/remoto/<%= service.Name %>.<%= method.Name %>', {
			method: 'post', data: data,
			headers: {
				'Content-Type': 'multipart/form-data',
				'Accept':'application/json',
			}
		}).then(function(responseData){ // success
			return responseData.json().then(
				json => {
					var responses = []
					json.forEach(response => {
						responses.push(new GetRoutesResponse(response))
					})
					return responses
				},
				error => {
					throw error
				}
			)
		}, function(error){ // error
			throw new Error('<%= service.Name %>Client.<%= camelize_down(method.Name) %>Multi: ' + error.message)
		})
	}
	<% } %>
}
<% } %>
<%= for (structure) in unique_structures(def) { %>
<%= print_comment(structure.Comment) %>export class <%= structure.Name %> {
	constructor(data = {}) {
		this._data = data
		this._files = {}
	}
	<%= if (structure.IsRequestObject) { %>
	// addFile adds a file to the request and returns its unique name.
	// This method is not usually called directly, instead callers should use the setters
	// on the objects.
	addFile(filename, file) {
		let fieldname = 'files['+(_filesCount++)+']'
		this._files[fieldname] = file
		return fieldname
	}

	// allFiles gets an object of files in this request, keyed with
	// the fieldname.
	get allFiles() { return this._files }
	// filesCount gets the number of files in this request.
	get filesCount() { return _filesCount }
	<% } %>
	// toJSON gets a JSON string describing this object.
	toJSON() { return this._data }
<%= for (field) in structure.Fields { %>
	get <%= camelize_down(field.Name) %>() { return this._data.<%= underscore(field.Name) %> }
	<%= if (field.Type.Name == "remototypes.File") { %>set<%= field.Name %>(request, filename, <%= underscore(field.Name) %>) { this._data.<%= underscore(field.Name) %> = request.addFile(filename, <%= underscore(field.Name) %>) }<% } %>
	<%= if (!structure.IsResponseObject && field.Type.Name != "remototypes.File") { %>set <%= camelize_down(field.Name) %>(<%= underscore(field.Name) %>) { 
		<%= if (field.Type.IsStruct) { %>
		if (!<%= camelize_down(field.Name) %> instanceof <%= field.Type.Name %>) {
			throw '<%= structure.Name %>: <%= camelize_down(field.Name) %> should be of type <%= field.Type.Name %>'
		}
		<% } %>
		this._data.<%= underscore(field.Name) %> = <%= underscore(field.Name) %>
	}<% } %><% } %>
}
<% } %>
